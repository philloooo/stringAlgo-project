#really primitive stage. but it works
#need to change file directories as they are currently set up for my folders

import nltk
import copy
import re
from nltk.stem.lancaster import LancasterStemmer
from nltk.stem import RegexpStemmer
#sentenceinfo contains info on the sentence, the num of genes in the sentence,
#the relation,
sentencedb = dict()
countsentences=0
def isGene(x,t):
    if len(t)>1:
        
        if t.index(x) ==0:
            if t[t.index(x)+1] in [">","<","=","score"]:
                return False
        elif t.index(x) ==len(t)-1:
            if t[t.index(x)-1] in [">","<","=","score"]:
                return False
        elif(t[t.index(x)+1] in [">","<","=","score"])or (
            t[t.index(x)-1] in [">","<","=","score"]):
            return False
        else:
            return True
        return True
    else:
        return False

def countgenes(s,geneset):
    s=nltk.word_tokenize(s)
    numgenes=0
    for i in s:
        if i in geneset and isGene(i,s):
            numgenes+=1
            
    
    
    return numgenes

#blah = line.split("\t")
abstracts = open(r"C:\Python27\abstractsNew.txt","r")
#lines = abstracts.read()
#print lines.split("\t")
storage = dict()
x= open(r"C:\Python27\finalGeneSymbols.txt","r")
a=x.read()
a = a.split("\n")
seta= set(a)
#print seta

    
    
for x in abstracts:
    #print x
    x =x.split("\t")
    #sentences=splitParagraphIntoSentences(x[-1])
    
    #sentencelist=(x[-1]).split(". ")
    sentencelist =re.split("\. (?=[A-Z])",x[-1])
    sentencelistcopy=copy.deepcopy(sentencelist)
    l = len(sentencelist)
    for i in xrange(l):
        
        if countgenes(sentencelistcopy[i],seta)<2:
            sentencelist.remove(sentencelistcopy[i])
            
    #print sentences
    #print type(x[-1])
    storage[x[0]] = sentencelist
    #print x[0]
#print abstracts
abstracts.close()
    


numsent = 2
sentenceinfo = [[0,[],0] for x in xrange(numsent)]
num_genes=0
bw=0
gene_names = seta
file = open(r"C:\Python27\worddictionaries\posWords.txt","r")
a=file.read()
a = a.split("\n")
posSet= set(a)
file.close()
file = open(r"C:\Python27\worddictionaries\negWords.txt","r")
a=file.read()
a = a.split("\n")
negSet= set(a)
file.close()
file = open(r"C:\Python27\worddictionaries\neutralWords.txt","r")
a=file.read()
a = a.split("\n")
neutralSet= set(a)
file.close()
file = open(r"C:\Python27\worddictionaries\negations.txt","r")
a=file.read()
a = a.split("\n")
negationSet= set(a)
file.close()
verblist = [["upregulat"],["downregulat"]]
#sentence = "Why are you splicing that gene?";
sentence = "gene1 is downregulated by gene2"
#st = PorterStemmer()
st = RegexpStemmer('ing$|s$|e$|ed$|es$', min=4)
def findsuf(string,x):
    a = ""
    for i in xrange(x):
        a+=string[len(string)-1-(x-i-1)]
        #a+="halloween"[len("halloween")-1-(3-i-1)]
    return a
finalOutput=[]

        
    
for id in storage:
    for sentence in storage[id]:
        
        rlist = [0,0,0]
        #sentence = storage[id]
        relation = "unknown"
        
        tokens = nltk.word_tokenize(sentence)
        tokenscopy = copy.deepcopy(tokens)
        #print tokens
        #for x in tokens:
            #print st.stem(x) 
        tagged = nltk.pos_tag(tokens)
        #print tokens
        #print len(tagged)
        #print tagged

        for x in tagged:
            
            if x[1]=='VBP' or x[1]=='VBN' or x[1] =='VBZ' or x[1] == 'VBG':
                tokenscopy[tagged.index(x)] = st.stem(x[0])
        store=0
        genes = []
        #print tokens,tokenscopy
        relation = "none"
        direction = 0
        for x in tokens:
            
            if x in gene_names:
                genes.append(x)
                num_genes+=1
                store = tokens.index(x)
        
        in1 = tokens.index(genes[0])
        in2 = tokens.index(genes[1])
        indexx=0
        neg=1
        for i in xrange(in1 +1,in2):
            #print tokenscopy[i]
            if tokenscopy[i] == "not":
                #print genes[0],genes[1]
                neg=-1
            
            
        for i in xrange(in1 +1,in2):
            
            
            if tokenscopy[i] in posSet:
                relation = 1*neg
                
                
                
            elif tokenscopy[i] in negSet:
                relation = -1*neg
            #elif tokenscopy[i] in neutralSet:
                #relation = 0*neg
            
            if (tokenscopy[i] in verblist[0] or tokenscopy[i] in
                verblist[1]):
                if  findsuf(tokens[i],2)=="ed":
                    direction =1
                    
                else:
                    direction =0
                
                
        if direction ==0:
            rlist = [genes[0],genes[1],relation]
            #print genes[0],relation,genes[1]
        elif direction == 1 :
            rlist = [genes[1],genes[0],relation]
            #print genes[1], relation, genes[0]
        if relation!="none":
            #the above condition is so that it does not output sentences for which no relation
            #has been found. This makes analysis easier. Must change this during final program.
            sentencedb[countsentences]=sentence
            #use this to have the sentences represented by a number
            finalOutput.append([id,countsentences,rlist])
            #use this to have the actual sentences in the output
            #finalOutput.append([id,sentence,rlist])
            
            countsentences+=1
      
            
print finalOutput


